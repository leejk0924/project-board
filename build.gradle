plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.17-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.jk'
version = 'v1.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.postgresql:postgresql'

    // queryDSL 설정  -> spring.dependency-management 가 버전 관리하는 대상에 포함
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    // NoClassDefFoundError 발생에 대응하는 어노테이션
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"     // java.lang.NoClassDefFoundError (javax.annotation.Generated)
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"   // java.lang.NoClassDefFoundError (javax.annotation.Entity)

    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
// queryDSL 설정부
def generated = 'src/main/generated'
// queryDSL QClass 파일 생성 위치 지정
/**
 * queryDSL은 자동으로 QClass를 생성 -> build 디렉토리에 생성된다.
 * 아래 설정을 통해 build 디렉토리가 아닌 src/main/generated 디렉터리로 이동
 * IDE를 이용해 빌드 시 문제 발생 -> gradle 빌드 시 빌드 도구가 스캔하는 영역과 IDE 가 빌드 시 인텔리제이가 스캔하는 영역에 차이가 발생 -> 중복 스캔이 일어남
 * 중복 스캔으로 인해 충돌 문제가 발생한다. -> build 디렉토리만 아니면 충돌 발생이 일어나지 않음
 */
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}
// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}
// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

